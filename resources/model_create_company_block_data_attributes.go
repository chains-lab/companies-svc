/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"bytes"
	"fmt"
)

// checks if the CreateCompanyBlockDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCompanyBlockDataAttributes{}

// CreateCompanyBlockDataAttributes struct for CreateCompanyBlockDataAttributes
type CreateCompanyBlockDataAttributes struct {
	// The UUID of the company to be blocked.
	CompanyId uuid.UUID `json:"company_id"`
	// The reason for blocking the company.
	Reason string `json:"reason"`
}

type _CreateCompanyBlockDataAttributes CreateCompanyBlockDataAttributes

// NewCreateCompanyBlockDataAttributes instantiates a new CreateCompanyBlockDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCompanyBlockDataAttributes(companyId uuid.UUID, reason string) *CreateCompanyBlockDataAttributes {
	this := CreateCompanyBlockDataAttributes{}
	this.CompanyId = companyId
	this.Reason = reason
	return &this
}

// NewCreateCompanyBlockDataAttributesWithDefaults instantiates a new CreateCompanyBlockDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCompanyBlockDataAttributesWithDefaults() *CreateCompanyBlockDataAttributes {
	this := CreateCompanyBlockDataAttributes{}
	return &this
}

// GetCompanyId returns the CompanyId field value
func (o *CreateCompanyBlockDataAttributes) GetCompanyId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *CreateCompanyBlockDataAttributes) GetCompanyIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *CreateCompanyBlockDataAttributes) SetCompanyId(v uuid.UUID) {
	o.CompanyId = v
}

// GetReason returns the Reason field value
func (o *CreateCompanyBlockDataAttributes) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *CreateCompanyBlockDataAttributes) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *CreateCompanyBlockDataAttributes) SetReason(v string) {
	o.Reason = v
}

func (o CreateCompanyBlockDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCompanyBlockDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["company_id"] = o.CompanyId
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *CreateCompanyBlockDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company_id",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCompanyBlockDataAttributes := _CreateCompanyBlockDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCompanyBlockDataAttributes)

	if err != nil {
		return err
	}

	*o = CreateCompanyBlockDataAttributes(varCreateCompanyBlockDataAttributes)

	return err
}

type NullableCreateCompanyBlockDataAttributes struct {
	value *CreateCompanyBlockDataAttributes
	isSet bool
}

func (v NullableCreateCompanyBlockDataAttributes) Get() *CreateCompanyBlockDataAttributes {
	return v.value
}

func (v *NullableCreateCompanyBlockDataAttributes) Set(val *CreateCompanyBlockDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCompanyBlockDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCompanyBlockDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCompanyBlockDataAttributes(val *CreateCompanyBlockDataAttributes) *NullableCreateCompanyBlockDataAttributes {
	return &NullableCreateCompanyBlockDataAttributes{value: val, isSet: true}
}

func (v NullableCreateCompanyBlockDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCompanyBlockDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


