/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"bytes"
	"fmt"
)

// checks if the SentInviteDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SentInviteDataAttributes{}

// SentInviteDataAttributes struct for SentInviteDataAttributes
type SentInviteDataAttributes struct {
	// ID of the company the invite is for
	CompanyId uuid.UUID `json:"company_id"`
	// Role assigned to the invited user
	Role string `json:"role"`
}

type _SentInviteDataAttributes SentInviteDataAttributes

// NewSentInviteDataAttributes instantiates a new SentInviteDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSentInviteDataAttributes(companyId uuid.UUID, role string) *SentInviteDataAttributes {
	this := SentInviteDataAttributes{}
	this.CompanyId = companyId
	this.Role = role
	return &this
}

// NewSentInviteDataAttributesWithDefaults instantiates a new SentInviteDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSentInviteDataAttributesWithDefaults() *SentInviteDataAttributes {
	this := SentInviteDataAttributes{}
	return &this
}

// GetCompanyId returns the CompanyId field value
func (o *SentInviteDataAttributes) GetCompanyId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *SentInviteDataAttributes) GetCompanyIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *SentInviteDataAttributes) SetCompanyId(v uuid.UUID) {
	o.CompanyId = v
}

// GetRole returns the Role field value
func (o *SentInviteDataAttributes) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *SentInviteDataAttributes) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *SentInviteDataAttributes) SetRole(v string) {
	o.Role = v
}

func (o SentInviteDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SentInviteDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["company_id"] = o.CompanyId
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *SentInviteDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company_id",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSentInviteDataAttributes := _SentInviteDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSentInviteDataAttributes)

	if err != nil {
		return err
	}

	*o = SentInviteDataAttributes(varSentInviteDataAttributes)

	return err
}

type NullableSentInviteDataAttributes struct {
	value *SentInviteDataAttributes
	isSet bool
}

func (v NullableSentInviteDataAttributes) Get() *SentInviteDataAttributes {
	return v.value
}

func (v *NullableSentInviteDataAttributes) Set(val *SentInviteDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSentInviteDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSentInviteDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSentInviteDataAttributes(val *SentInviteDataAttributes) *NullableSentInviteDataAttributes {
	return &NullableSentInviteDataAttributes{value: val, isSet: true}
}

func (v NullableSentInviteDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSentInviteDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


